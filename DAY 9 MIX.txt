student_scores = {
  "Harry": 81,
  "Ron": 78,
  "Hermione": 99, 
  "Draco": 74,
  "Neville": 62,
}
# ðŸš¨ Don't change the code above ðŸ‘†

#TODO-1: Create an empty dictionary called student_grades.
student_grades = {}

#TODO-2: Write your code below to add the grades to student_grades.ðŸ‘‡

for item in student_scores:
    if student_scores[item] >= 91:
        student_grades[item] = "Outstanding"
    elif student_scores[item] >= 81:
        student_grades[item] = "Exceeds Expectations"
    elif student_scores[item] >= 71:
        student_grades[item] = "Acceptable"
    else:
        student_grades[item] = "Fail"


# ðŸš¨ Don't change the code below ðŸ‘‡
print(student_grades)




##Python Dictionaries

programming_dictionary = {
  "Bug": "An error in a program that prevents the program from running as expected.", 
  "Function": "A piece of code that you can easily call over and over again.",
}

#Retrieving items from dictionary.
# print(programming_dictionary["Function"])

#Adding new items to dictionary.
programming_dictionary["Loop"] = "The action of doing something over and over again."

#Create an empty dictionary.
empty_dictionary = {}

#Wipe an existing dictionary
# programming_dictionary = {}
# print(programming_dictionary)

#Edit an item in a dictionary
programming_dictionary["Bug"] = "A moth in your computer."
# print(programming_dictionary)

#Loop through a dictionary
# for key in programming_dictionary:
#   print(key)
#   print(programming_dictionary[key])

#######################################

#Nesting 
capitals = {
  "France": "Paris",
  "Germany": "Berlin",
}

#Nesting a List in a Dictionary

travel_log = {
  "France": ["Paris", "Lille", "Dijon"],
  "Germany": ["Berlin", "Hamburg", "Stuttgart"],
}

#Nesting Dictionary THAT CONTAINS A LIST in a Dictionary

travel_log = {
  "France": {"cities_visited": ["Paris", "Lille", "Dijon"], "total_visits": 12},
  "Germany": {"cities_visited": ["Berlin", "Hamburg", "Stuttgart"], "total_visits": 5},
}

#Nesting Dictionaries in Lists

travel_log = [
{
  "country": "France", 
  "cities_visited": ["Paris", "Lille", "Dijon"], 
  "total_visits": 12,
},
{
  "country": "Germany",
  "cities_visited": ["Berlin", "Hamburg", "Stuttgart"],
  "total_visits": 5,
},
]



travel_log = [
{
  "country": "France",
  "visits": 12,
  "cities": ["Paris", "Lille", "Dijon"]
},
{
  "country": "Germany",
  "visits": 5,
  "cities": ["Berlin", "Hamburg", "Stuttgart"]
},
]
#ðŸš¨ Do NOT change the code above

#TODO: Write the function that will allow new countries
#to be added to the travel_log. ðŸ‘‡
def add_new_country(name, times, cities):
    travel_log.append({"country": name, "visits": times, "cities": cities})

#ðŸš¨ Do not change the code below
add_new_country("Russia", 2, ["Moscow", "Saint Petersburg"])
print(travel_log)





HER FINAL PROJECT


from replit import clear
from art import logo
print(logo)

bids = {}
bidding_finished = False

def find_highest_bidder(bidding_record):
  highest_bid = 0
  winner = ""
  # bidding_record = {"Angela": 123, "James": 321}
  for bidder in bidding_record:
    bid_amount = bidding_record[bidder]
    if bid_amount > highest_bid: 
      highest_bid = bid_amount
      winner = bidder
  print(f"The winner is {winner} with a bid of ${highest_bid}")

while not bidding_finished:
  name = input("What is your name?: ")
  price = int(input("What is your bid?: $"))
  bids[name] = price
  should_continue = input("Are there any other bidders? Type 'yes or 'no'.\n")
  if should_continue == "no":
    bidding_finished = True
    find_highest_bidder(bids)
  elif should_continue == "yes":
    clear()
  
  
  
  
  MY FINAL PROJECT
  
  
  
  from replit import clear
from art import logo
#HINT: You can call clear() to clear the output in the console.
print(logo)
dic = {}
yes_no = True
while yes_no is True:
  name = input("what is your name?: ")
  bid = int(input("what is your bid?: $"))
  dic[name] = bid
  if input("Are there any other bidders? Type 'yes' or 'no' : ") == "no":
    yes_no = False
  else:
    clear()

list = []
list2 = []
for people in dic:
    list.append(dic[people])
    list2.append(people)

highestbid = max(list)
position = list.index(highestbid)
print(f"The winner is {list2[position]} with a bid of ${highestbid}")
  